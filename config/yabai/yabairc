#!/usr/bin/env zsh

# the scripting-addition must be loaded manually if
# you are running yabai on macOS Big Sur. Uncomment
# the following line to have the injection performed
# when the config is executed during startup.
#
# for this to work you must configure sudo such that
# it will be able to run the command without password
#
# see this wiki page for information:
#  - https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)
#
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
sudo yabai --load-sa

# global settings
yabai -m config mouse_follows_focus          off
yabai -m config focus_follows_mouse          off
yabai -m config window_origin_display        focused
yabai -m config window_placement             second_child
yabai -m config window_shadow                on
yabai -m config window_opacity               off
yabai -m config window_opacity_duration      0.0
yabai -m config active_window_opacity        1.0
yabai -m config normal_window_opacity        0.75
yabai -m config insert_feedback_color        0xffd75f5f
yabai -m config split_ratio                  0.50
yabai -m config auto_balance                 off
yabai -m config mouse_modifier               fn
yabai -m config mouse_action1                move
yabai -m config mouse_action2                resize
yabai -m config mouse_drop_action            swap

# general space settings
yabai -m config layout                       bsp
yabai -m config top_padding                  32
yabai -m config bottom_padding               4
yabai -m config left_padding                 4
yabai -m config right_padding                4
yabai -m config window_gap                   4

# mission-control desktop labels
yabai -m space 1 --label emacs
yabai -m space 2 --label terminal
yabai -m space 3 --label mail
yabai -m space 4 --label web
yabai -m space 5 --label social
yabai -m space 6 --label media


# window rules
yabai -m rule --add app="^Emacs$" space=emacs
yabai -m rule --add app="^kitty$" title!="^kitty-local" space=terminal
yabai -m rule --add app="^Mail" space=mail
yabai -m rule --add app="^Safari$" space=web
yabai -m rule --add app="^Firefox$" space=web
yabai -m rule --add app="^Arc$" space=web
yabai -m rule --add app="^Google Chrome$" space=web
yabai -m rule --add app="^Spotify$" space=media
yabai -m rule --add app="^Slack$" space=social

yabai -m rule --add label="Finder" app="^Finder$" title="(Co(py|nnect)|Move|Info|Pref)" manage=off
yabai -m rule --add label="macfeh" app="^macfeh$" manage=off
yabai -m rule --add label="System Preferences" app="^System Preferences$" title=".*" manage=off
yabai -m rule --add label="App Store" app="^App Store$" manage=off
yabai -m rule --add label="Activity Monitor" app="^Activity Monitor$" manage=off
yabai -m rule --add label="mpv" app="^mpv$" manage=off
yabai -m rule --add label="Software Update" title="Software Update" manage=off
yabai -m rule --add label="About This Mac" app="System Information" title="About This Mac" manage=off
yabai -m rule --add label="GlobalProtect" app="^GlobalProtect$" title="GlobalProtect" manage=off
yabai -m rule --add label="Telegram" app="^Telegram$" manage=off sub-layer=normal sticky=on
yabai -m rule --add label="Teams" app="^Microsoft Teams (work or school)$" manage=off sub-layer=normal sticky=off
yabai -m rule --add label="Zoom" app="^zoom.us$" manage=off sub-layer=normal sticky=off
yabai -m rule --add label="BlueJeans" app="^BlueJeans$" manage=off sub-layer=normal sticky=off
yabai -m rule --add label="Messages" app="^Messages$" manage=off sub-layer=normal sticky=on
yabai -m rule --add label="WhatsApp" app="WhatsApp" manage=off sub-layer=normal sticky=on
yabai -m rule --add label="WebEx" app="Cisco Webex Meetings" manage=off sub-layer=normal sticky=on
yabai -m rule --add label="Inkscape" title!="Inkscape$" app="Inkscape" manage=off sub-layer=normal

# Clean up empty spaces with no windows on them.
yabai -m signal --add event=space_changed action="sh ~/bin/cleanEmptySpaces.sh"
# source "$ITEM_DIR/media.sh"

yabai -m signal --add event=window_focused action="sketchybar --trigger window_focus"
yabai -m signal --add event=window_created action="sketchybar --trigger windows_on_spaces"
yabai -m signal --add event=window_destroyed action="sketchybar --trigger windows_on_spaces"

yabai -m config external_bar all:10:0

function focus_under_cursor {
  if yabai -m query --windows --space |
      jq -er 'map(select(.focused == 1)) | length == 0' >/dev/null; then
    yabai -m window --focus mouse 2>/dev/null || true
  fi
}

# If no window on the current space is focused after a window is destroyed or
# minimized, or an application is hidden, focus the window under the cursor.
yabai -m signal --add event=window_destroyed action="${functions[focus_under_cursor]}"
yabai -m signal --add event=window_minimized action="${functions[focus_under_cursor]}"
yabai -m signal --add event=application_hidden action="${functions[focus_under_cursor]}"

echo "yabai configuration loaded.."
